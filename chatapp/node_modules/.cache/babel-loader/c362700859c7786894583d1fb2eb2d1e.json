{"ast":null,"code":"import _slicedToArray from \"/Users/wesleybonneville/workspace/chatapp/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/wesleybonneville/workspace/chatapp/chatapp/src/components/Chat/Chat.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./Chat.css\";\nimport InfoBar from \"../InfoBar/InfoBar\";\nimport Input from \"../Input/Input\";\nimport Messages from \"../Messsages/Messages\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        room = _useState4[0],\n        setRoom = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        message = _useState6[0],\n        setMessage = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        messages = _useState8[0],\n        setMessages = _useState8[1];\n\n  const ENDPOINT = \"localhost:5000\"; // useEffect runs when the component renders\n  // retrieve users data\n\n  useEffect(() => {\n    const _queryString$parse = queryString.parse(location.search),\n          name = _queryString$parse.name,\n          room = _queryString$parse.room; // pass endpoint to server\n\n\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room);\n    socket.emit(\"join\", {\n      name,\n      room\n    }, () => {});\n    return () => {\n      socket.emit(\"disconnect\");\n      socket.off();\n    }; // re-render useEffect only if these two values change\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    // listen for messages\n    socket.on(\"message\", message => {\n      // use spread operator\n      // add one message into array of messages\n      // adding all messages to messages array\n      setMessages([...messages, message]);\n    }); // only run useEffect when messages array changes\n  }, [messages]); // create a function for sending messages\n\n  const sendMessage = event => {\n    // don't refresh the whole page\n    event.preventDefault(); // emit listener is in index.js\n    // emit listener listens for the sendMessage event\n    // sends message to server\n\n    if (message) {\n      // when you send a message\n      // the message field returns to empty string\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\n    }\n  };\n\n  console.log(message, messages);\n  return React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(InfoBar, {\n    room: room,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(Messages, {\n    messages: messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/wesleybonneville/workspace/chatapp/chatapp/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","InfoBar","Input","Messages","queryString","io","socket","Chat","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","off","on","sendMessage","event","preventDefault","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Chat.css\";\nimport InfoBar from \"../InfoBar/InfoBar\";\nimport Input from \"../Input/Input\";\nimport Messages from \"../Messsages/Messages\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\n\nlet socket;\n\nconst Chat = ({ location }) => {\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  const ENDPOINT = \"localhost:5000\";\n\n  // useEffect runs when the component renders\n  // retrieve users data\n\n  useEffect(() => {\n    const { name, room } = queryString.parse(location.search);\n\n    // pass endpoint to server\n    socket = io(ENDPOINT);\n\n    setName(name);\n    setRoom(room);\n\n    socket.emit(\"join\", { name, room }, () => {});\n\n    return () => {\n      socket.emit(\"disconnect\");\n\n      socket.off();\n    };\n    // re-render useEffect only if these two values change\n  }, [ENDPOINT, location.search]);\n\n  useEffect(() => {\n    // listen for messages\n    socket.on(\"message\", message => {\n      // use spread operator\n      // add one message into array of messages\n      // adding all messages to messages array\n      setMessages([...messages, message]);\n    });\n    // only run useEffect when messages array changes\n  }, [messages]);\n\n  // create a function for sending messages\n\n  const sendMessage = event => {\n    // don't refresh the whole page\n    event.preventDefault();\n    // emit listener is in index.js\n    // emit listener listens for the sendMessage event\n    // sends message to server\n\n    if (message) {\n      // when you send a message\n      // the message field returns to empty string\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\n    }\n  };\n\n  console.log(message, messages);\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n        <InfoBar room={room} />\n        <Messages messages={messages} />\n        <Input\n          message={message}\n          setMessage={setMessage}\n          sendMessage={sendMessage}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}